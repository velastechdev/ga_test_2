name: Deploy Metabase Production

on:
  release:
    types: [published]

jobs:
  deploy_metabase_production:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set Up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23.1'

      # - name: Run Import Script
      #   if: success()
      #   env:
      #     API_KEY: ${{ secrets.PRODUCTION_API_KEYs }}
      #     ENDPOINT_URL: ${{ vars.PRODUCTION_ENDPOINT_URLs }}
      #   run: |
      #     echo "Running Import Script..."
      #     echo "Endpoint URL: $ENDPOINT_URL"
      #     echo "API Key: $API_KEY"
      #     go run mains.go imports \
      #       endpoint_url=$ENDPOINT_URL \
      #       api_key=$API_KEY

      - name: Check if ENTITY_ID is not empty
        if: success()
        id: check_entity_id
        run: |
          if [ -z "${{ vars.ENTITY_ID// }}" ]; then
            echo "ENTITY_ID is empty, skipping subsequent steps"
            echo "should_run=false" >> $GITHUB_OUTPUT
          else
            echo "ENTITY_ID has value: ${{ vars.ENTITY_ID }}"
            echo "should_run=true" >> $GITHUB_OUTPUT
          fi

      - name: Get Dashboard ID from Entity ID
        id: get_dashboard_id
        if: steps.check_entity_id.outputs.should_run == 'true' && success()
        env:
          API_KEY: ${{ secrets.PRODUCTION_API_KEY }}
          ENDPOINT_URL: ${{ vars.PRODUCTION_ENDPOINT_URL }}
          ENTITY_ID: ${{ vars.ENTITY_ID }}
        run: |
          echo "Fetching dashboard ID for entity: $ENTITY_ID"
          
          # Run command and capture output
          OUTPUT=$(go run main.go get_dashboard_id \
            endpoint_url=$ENDPOINT_URL \
            api_key=$API_KEY \
            entity_id=$ENTITY_ID)
          
          echo "Raw output: $OUTPUT"
          
          # Verify output contains DASHBOARD_ID= pattern
          if [[ "$OUTPUT" != *"DASHBOARD_ID="* ]]; then
            echo "::error::Expected 'DASHBOARD_ID=' in output but got: $OUTPUT"
            exit 1
          fi
          
          # Extract the value after DASHBOARD_ID=
          DASHBOARD_ID="${OUTPUT#*DASHBOARD_ID=}"
          DASHBOARD_ID="${DASHBOARD_ID%%[[:space:]]*}"  # Remove any trailing whitespace/newline
          
          echo "DASHBOARD_ID=$DASHBOARD_ID" >> $GITHUB_ENV
          echo "Successfully extracted DASHBOARD_ID: $DASHBOARD_ID"
        
      - name: Call Dashboard Update Endpoint
        id: call_dashboard_update
        if: steps.check_entity_id.outputs.should_run == 'true' && success()
        env:
          DASHBOARD_ID: ${{ env.DASHBOARD_ID }}
          ADMIN_API_KEY: ${{ secrets.ADMIN_API_KEY }}
          MANAGER_API_URL: ${{ vars.MANAGER_API_PRODUCTION_URL }}
        run: |
          echo "Calling dashboard update endpoint for dashboard ID: $DASHBOARD_ID"
          curl --location --request PUT "$MANAGER_API_URL/es/api/v3/toggle/feature/user/dashboard" \
            --header "x-api-key: $ADMIN_API_KEY" \
            --header 'Content-Type: application/json' \
            --data "{
                \"name\": \"Update dashboard $DASHBOARD_ID\",
                \"id_dashboard\": $DASHBOARD_ID
              }"
          
          # Check if the curl command succeeded
          if [ $? -ne 0 ]; then
            echo "Failed to call dashboard update endpoint"
            exit 1
          fi

      - name: Cleaning Repository variable entity_id
        if: steps.check_entity_id.outputs.should_run == 'true' && success()
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          echo "Updating repository variable with entity ID..."
          curl -X PATCH \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/${{ github.repository }}/actions/variables/ENTITY_ID" \
            -d '{"value":" "}'