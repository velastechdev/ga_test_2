name: Deploy Metabase Production

on:
  release:
    types: [published]

jobs:
  deploy_metabase_production:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set Up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23.1'

      # - name: Run Import Script
      #   if: success()
      #   env:
      #     API_KEY: ${{ secrets.PRODUCTION_API_KEYWW }}
      #     ENDPOINT_URL: ${{ vars.PRODUCTION_ENDPOINT_URLWW }}
      #   run: |
      #     echo "Running Import Script..."
      #     echo "Endpoint URL: $ENDPOINT_URL"
      #     echo "API Key: $API_KEY"
      #     go run mains.go imports \
      #       endpoint_url=$ENDPOINT_URL \
      #       api_key=$API_KEY

      - name: Get Entity ID from Dashboard
        id: get_entity_id
        if: success()
        env:
          API_KEY: ${{ secrets.STAGING_API_KEY }}
          ENDPOINT_URL: ${{ vars.STAGING_ENDPOINT_URL }}
          DASHBOARD_ID: ${{ env.DASHBOARD_ID }}
        run: |
          echo "Fetching entity ID for dashboard: $DASHBOARD_ID"
          OUTPUT=$(go run main.go get_dashboard_entity_id \
            endpoint_url=$ENDPOINT_URL \
            api_key=$API_KEY \
            dashboard_id=$DASHBOARD_ID)
          
          echo "Raw output: $OUTPUT"
          
          if ! echo "$OUTPUT" | grep -q "ENTITY_ID="; then
            echo "::error::Failed to find ENTITY_ID in output"
            exit 1
          fi
          
          ENTITY_ID=$(echo "$OUTPUT" | grep "ENTITY_ID=" | cut -d'=' -f2)
          echo "ENTITY_ID=$ENTITY_ID" >> $GITHUB_ENV
          echo "Successfully extracted ENTITY_ID: $ENTITY_ID"

      - name: Cleaning Repository variable entity_id
        if: success()
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          echo "Updating repository variable with entity ID..."
          curl -X PATCH \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/${{ github.repository }}/actions/variables/ENTITY_ID" \
            -d "{\"value\":\""}"
      
      - name: Call Dashboard Update Endpoint
        id: call_dashboard_update
        if: success()
        env:
          DASHBOARD_ID: ${{ env.DASHBOARD_ID }}
          ADMIN_API_KEY: ${{ secrets.ADMIN_API_KEY }}
          MANAGER_API_URL: ${{ vars.MANAGER_API_PROD_URL }}
        run: |
          echo "Calling dashboard update endpoint for dashboard ID: $DASHBOARD_ID"
          curl --location --request PUT "$MANAGER_API_URL/es/api/v3/toggle/feature/user/dashboard" \
            --header "x-api-key: $ADMIN_API_KEY" \
            --header 'Content-Type: application/json' \
            --data "{
                \"name\": \"Update dashboard $DASHBOARD_ID\",
                \"id_dashboard\": $DASHBOARD_ID
              }"
          
          # Check if the curl command succeeded
          if [ $? -ne 0 ]; then
            echo "Failed to call dashboard update endpoint"
            exit 1
          fi